services:
  postgres:
    image: postgres:17.5-alpine
    container_name: collaborative-task-management-postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: collaborative_task_management
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - collaborative-task-management-network

  rabbitmq:
    image: rabbitmq:3.13-management-alpine
    container_name: collaborative-task-management-rabbitmq
    restart: unless-stopped
    environment:
      RABBITMQ_DEFAULT_USER: rabbitmq
      RABBITMQ_DEFAULT_PASS: rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - collaborative-task-management-network

  auth-service:
    build:
      context: .
      dockerfile: apps/auth-service/Dockerfile
      target: development
    container_name: collaborative-task-management-auth-service
    restart: unless-stopped
    command: pnpm dev
    ports:
      - "3002:3002"
    environment:
      NODE_ENV: development
      PORT: 3002
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USERNAME: postgres
      DB_PASSWORD: postgres
      DB_NAME: auth_service
      JWT_SECRET: jwt_secret
      JWT_ACCESS_EXPIRATION: 15m
      JWT_REFRESH_EXPIRATION: 7d
      LOG_LEVEL: info
    volumes:
      - ./apps/auth-service:/app/apps/auth-service
      - ./packages:/app/packages
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3002/health"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 40s
    networks:
      - collaborative-task-management-network

  tasks-service:
    build:
      context: .
      dockerfile: apps/tasks-service/Dockerfile
      target: development
    container_name: collaborative-task-management-tasks-service
    restart: unless-stopped
    command: pnpm dev
    ports:
      - "3003:3003"
    environment:
      NODE_ENV: development
      PORT: 3003
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USERNAME: postgres
      DB_PASSWORD: postgres
      DB_NAME: tasks_service
      JWT_SECRET: jwt_secret
      RABBITMQ_URL: amqp://rabbitmq:rabbitmq@rabbitmq:5672
      LOG_LEVEL: info
    volumes:
      - ./apps/tasks-service:/app/apps/tasks-service
      - ./packages:/app/packages
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3003/health"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 40s
    networks:
      - collaborative-task-management-network

  # notifications-service:
  #   build:
  #     context: .
  #     dockerfile: apps/notifications-service/Dockerfile
  #     target: development
  #   container_name: collaborative-task-management-notifications-service
  #   restart: unless-stopped
  #   command: pnpm dev
  #   ports:
  #     - '3004:3004'
  #   environment:
  #     NODE_ENV: development
  #     PORT: 3004
  #     DB_HOST: postgres
  #     DB_PORT: 5432
  #     DB_USERNAME: postgres
  #     DB_PASSWORD: postgres
  #     DB_NAME: notifications_service
  #     RABBITMQ_URL: amqp://rabbitmq:rabbitmq@rabbitmq:5672
  #     LOG_LEVEL: debug
  #   volumes:
  #     - ./apps/notifications-service:/app/apps/notifications-service
  #     - ./packages:/app/packages
  #     - /app/node_modules
  #     - /app/apps/notifications-service/node_modules
  #     - /app/packages/types/node_modules
  #     - /app/packages/utils/node_modules
  #     - /app/packages/logger/node_modules
  #   depends_on:
  #     postgres:
  #       condition: service_healthy
  #     rabbitmq:
  #       condition: service_healthy
  #   healthcheck:
  #     test: ['CMD', 'curl', '-f', 'http://localhost:3003/health']
  #     interval: 10s
  #     timeout: 5s
  #     retries: 5
  #     start_period: 40s
  #   networks:
  #     - collaborative-task-management-network

  api-gateway:
    build:
      context: .
      dockerfile: apps/api-gateway/Dockerfile
      target: development
    container_name: collaborative-task-management-api-gateway
    restart: unless-stopped
    command: pnpm dev
    ports:
      - "3001:3001"
    environment:
      NODE_ENV: development
      PORT: 3001
      AUTH_SERVICE_URL: http://auth-service:3002
      TASKS_SERVICE_URL: http://tasks-service:3003
      NOTIFICATIONS_SERVICE_URL: http://notifications-service:3004
      JWT_SECRET: jwt_secret
      LOG_LEVEL: info
    volumes:
      - ./apps/api-gateway:/app/apps/api-gateway
      - ./packages:/app/packages
    depends_on:
      auth-service:
        condition: service_healthy
      # tasks-service:
      #   condition: service_healthy
      # notifications-service:
      #   condition: service_healthy
    networks:
      - collaborative-task-management-network

  # web:
  #   build:
  #     context: .
  #     dockerfile: apps/web/Dockerfile
  #     target: development
  #   container_name: collaborative-task-management-web
  #   restart: unless-stopped
  #   command: pnpm dev
  #   ports:
  #     - '3000:3000'
  #   environment:
  #     VITE_API_URL: http://localhost:3001
  #     VITE_WS_URL: ws://localhost:3001
  #   volumes:
  #     - ./apps/web:/app/apps/web
  #     - /app/node_modules
  #     - /app/apps/web/node_modules
  #   depends_on:
  #     api-gateway:
  #       condition: service_healthy
  #   networks:
  #     - collaborative-task-management-network

volumes:
  postgres_data:
    name: collaborative-task-management-postgres-data
  rabbitmq_data:
    name: collaborative-task-management-rabbitmq-data

networks:
  collaborative-task-management-network:
    name: collaborative-task-management-network
    driver: bridge
