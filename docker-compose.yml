services:
  postgres:
    image: postgres:17.5-alpine
    container_name: task-management-postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: task_management
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - task-management-network

  rabbitmq:
    image: rabbitmq:3.13-management-alpine
    container_name: task-management-rabbitmq
    restart: unless-stopped
    environment:
      RABBITMQ_DEFAULT_USER: rabbitmq
      RABBITMQ_DEFAULT_PASS: rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - task-management-network

  auth-service:
    build:
      context: .
      dockerfile: apps/auth-service/Dockerfile
    container_name: task-management-auth-service
    restart: unless-stopped
    ports:
      - "3002:3002"
    env_file:
      - apps/auth-service/.env
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3002/health"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - task-management-network

  tasks-service:
    build:
      context: .
      dockerfile: apps/tasks-service/Dockerfile
    container_name: task-management-tasks-service
    restart: unless-stopped
    ports:
      - "3003:3003"
    env_file:
      - apps/tasks-service/.env
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3003/health"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - task-management-network

  notifications-service:
    build:
      context: .
      dockerfile: apps/notifications-service/Dockerfile
    container_name: task-management-notifications-service
    restart: unless-stopped
    ports:
      - "3004:3004"
    env_file:
      - apps/notifications-service/.env
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3004/health"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - task-management-network

  api-gateway:
    build:
      context: .
      dockerfile: apps/api-gateway/Dockerfile
    container_name: task-management-api-gateway
    restart: unless-stopped
    ports:
      - "3001:3001"
    env_file:
      - apps/api-gateway/.env
    depends_on:
      auth-service:
        condition: service_healthy
      tasks-service:
        condition: service_healthy
      notifications-service:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - task-management-network

  web:
    build:
      context: .
      dockerfile: apps/web/Dockerfile
    container_name: task-management-web
    restart: unless-stopped
    ports:
      - "3000:3000"
    env_file:
      - apps/web/.env
    depends_on:
      api-gateway:
        condition: service_healthy
    networks:
      - task-management-network

volumes:
  postgres_data:
  rabbitmq_data:

networks:
  task-management-network:
    driver: bridge
